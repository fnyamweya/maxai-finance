name: Push Hugging Face

on:
  push:
    branches:
      - main
    paths:
      - "modelcard.md"
      - "docs/modelcard.md"
      - "README.md"

permissions:
  contents: write

env:
  HF_REPO: "felixombura/maxai-finance-cash"
  SOURCE_PATH: "modelcard.md"
  DEST_PATH: "modelcard.md"

jobs:
  sync-to-hf:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install tools & deps (pyyaml, huggingface_hub, git-lfs)
        run: |
          set -e
          python -m pip install --upgrade pip
          # Install PyYAML (for frontmatter validation) and huggingface_hub (optional)
          pip install pyyaml huggingface_hub
          # Ensure git-lfs is available for pushing large files (optional for model artifacts)
          sudo apt-get update -y
          sudo apt-get install -y git-lfs || true
          git lfs install || true

      - name: Validate YAML frontmatter in source modelcard
        run: |
          python - <<'PY'
          import re, sys, yaml, pathlib
          p = pathlib.Path("${{ env.SOURCE_PATH }}")
          if not p.exists():
              print(f"ERROR: Source path {p} not found; aborting.")
              sys.exit(1)
          s = p.read_text(encoding='utf-8')
          # Look for YAML frontmatter at the top of the file
          m = re.match(r'^---\n(.*?)\n---\n', s, flags=re.S)
          if not m:
              print("ERROR: No YAML frontmatter found at top of file. Add frontmatter (--- ... ---) to the file.")
              sys.exit(2)
          try:
              meta = yaml.safe_load(m.group(1))
          except Exception as e:
              print("ERROR: Invalid YAML frontmatter:", e)
              sys.exit(3)
          # Required frontmatter keys
          required = ("language", "license")
          missing = [r for r in required if r not in (meta or {})]
          if missing:
              print(f"ERROR: frontmatter missing required key(s): {', '.join(missing)}")
              sys.exit(4)
          print("YAML frontmatter validated.")
          PY

      - name: Ensure HF_TOKEN is set
        run: |
          if [ -z "${{ secrets.HF_TOKEN }}" ]; then
            echo "ERROR: HF_TOKEN secret not found. Add it in repository Settings -> Secrets -> Actions."
            exit 1
          fi

      - name: Clone Hugging Face model repo (via token)
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          set -e
          echo "Cloning https://huggingface.co/${{ env.HF_REPO }} ..."
          rm -rf hf-repo || true
          # Token-based clone; token should have write access to the HF repo
          git clone https://x-access-token:${HF_TOKEN}@huggingface.co/${{ env.HF_REPO }} hf-repo
          ls -la hf-repo

      - name: Copy modelcard to HF repo and commit if changed
        run: |
          set -e
          # Copy source modelcard (or README) into HF repo
          cp -v "${{ env.SOURCE_PATH }}" "hf-repo/${{ env.DEST_PATH }}"
          # Optional: also copy README.md or other docs if desired
          # cp -v README.md hf-repo/README.md || true

          cd hf-repo
          git config user.email "github-actions@users.noreply.github.com"
          git config user.name "github-actions[bot]"

          # Stage the file(s)
          git add "${{ env.DEST_PATH }}" || true

          # If nothing changed, exit cleanly
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          # Commit and push changes
          git commit -m "Auto-sync modelcard from GitHub -> Hugging Face (via Actions)" || true
          # Push directly to main of the HF repo
          git push origin HEAD:main

      - name: Success message
        run: |
          echo "Sync complete. If there were changes, they have been pushed to https://huggingface.co/${{ env.HF_REPO }}"
